// Code generated by hertz generator.

package handler

import (
	"context"
	"easy-note/cmd/api/model/note"
	"easy-note/cmd/api/rpc"
	"easy-note/kitex_gen/demonote"
	"easy-note/pkg/consts"
	"easy-note/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
)

// CreateNote .
// @router /v2/note [POST]
func CreateNote(_ context.Context, c *app.RequestContext) {
	var err error
	var req note.CreateNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	userId, _ := c.Get(consts.IdentityKey)
	err = rpc.CreateNote(context.Background(), &demonote.CreateNoteRequest{
		Title:   req.Title,
		Content: req.Content,
		UserId:  userId.(int64),
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, nil)
}

// DeleteNote .
// @router /v2/note/:note_id [DELETE]
func DeleteNote(_ context.Context, c *app.RequestContext) {
	var err error
	var req note.DeleteNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	userId, _ := c.Get(consts.IdentityKey)
	err = rpc.DeleteNote(context.Background(), &demonote.DeleteNoteRequest{
		NoteId: req.NoteID,
		UserId: userId.(int64),
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, nil)
}

// UpdateNote .
// @router /v2/note/:note_id [PUT]
func UpdateNote(_ context.Context, c *app.RequestContext) {
	var err error
	var req note.UpdateNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	userId, _ := c.Get(consts.IdentityKey)
	err = rpc.UpdateNote(context.Background(), &demonote.UpdateNoteRequest{
		NoteId:  req.NoteID,
		UserId:  userId.(int64),
		Title:   req.Title,
		Content: req.Content,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, nil)
}

// QueryNote .
// @router /v2/note/query [GET]
func QueryNote(_ context.Context, c *app.RequestContext) {
	var err error
	var req note.QueryNoteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	userId, _ := c.Get(consts.IdentityKey)
	notes, total, err := rpc.QueryNotes(context.Background(), &demonote.QueryNoteRequest{
		UserId:    userId.(int64),
		SearchKey: req.SearchKey,
		Offset:    req.Offset,
		Limit:     req.Limit,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	SendResponse(c, errno.Success, map[string]interface{}{
		consts.Total: total,
		consts.Notes: notes,
	})
}
